package com.amusing.start.platform.enums.code.ali;

import com.amusing.start.code.BaseCode;

/**
 * @author Lv.QingYu
 * @description:
 * @since 2023/11/9
 */
public enum BarCodePayErrorCode implements BaseCode<BarCodePayErrorCode> {

    INVALID_PARAMETER("PBC00001", "ACQ.INVALID_PARAMETER", "参数无效"),
    ACCESS_FORBIDDEN("PBC00002", "ACQ.ACCESS_FORBIDDEN", "无权限使用接口"),
    EXIST_FORBIDDEN_WORD("PBC00003", "ACQ.EXIST_FORBIDDEN_WORD", "订单信息中包含违禁词"),
    PARTNER_ERROR("PBC00004", "ACQ.PARTNER_ERROR", "应用APP_ID填写错误"),
    TOTAL_FEE_EXCEED("PBC00005", "ACQ.TOTAL_FEE_EXCEED", "订单总金额超过限额"),
    PAYMENT_AUTH_CODE_INVALID("PBC00006", "ACQ.PAYMENT_AUTH_CODE_INVALID", "付款码无效"),
    CONTEXT_INCONSISTENT("PBC00007", "ACQ.CONTEXT_INCONSISTENT", "订单信息不一致"),
    TRADE_HAS_SUCCESS("PBC00008", "ACQ.TRADE_HAS_SUCCESS", "交易已被支付"),
    TRADE_HAS_CLOSE("PBC00009", "ACQ.TRADE_HAS_CLOSE", "交易已经关闭"),
    BUYER_BALANCE_NOT_ENOUGH("PBC00010", "ACQ.BUYER_BALANCE_NOT_ENOUGH", "买家余额不足"),
    BUYER_BANKCARD_BALANCE_NOT_ENOUGH("PBC00011", "ACQ.BUYER_BANKCARD_BALANCE_NOT_ENOUGH", "用户银行卡余额不足"),
    ERROR_BALANCE_PAYMENT_DISABLE("PBC00012", "ACQ.ERROR_BALANCE_PAYMENT_DISABLE", "余额支付功能关闭"),
    BUYER_SELLER_EQUAL("PBC00013", "ACQ.BUYER_SELLER_EQUAL", "买卖家不能相同"),
    TRADE_BUYER_NOT_MATCH("PBC00014", "ACQ.TRADE_BUYER_NOT_MATCH", "交易买家不匹配"),
    BUYER_ENABLE_STATUS_FORBID("PBC00015", "ACQ.BUYER_ENABLE_STATUS_FORBID", "买家状态非法"),
    PULL_MOBILE_CASHIER_FAIL("PBC00016", "ACQ.PULL_MOBILE_CASHIER_FAIL", "唤起移动收银台失败"),
    MOBILE_PAYMENT_SWITCH_OFF("PBC00017", "ACQ.MOBILE_PAYMENT_SWITCH_OFF", "用户的无线支付开关关闭"),
    PAYMENT_FAIL("PBC00018", "ACQ.PAYMENT_FAIL", "支付失败"),
    BUYER_PAYMENT_AMOUNT_DAY_LIMIT_ERROR("PBC00019", "ACQ.BUYER_PAYMENT_AMOUNT_DAY_LIMIT_ERROR", "买家付款日限额超限"),
    BEYOND_PAY_RESTRICTION("PBC00020", "ACQ.BEYOND_PAY_RESTRICTION", "商户收款额度超限"),
    BEYOND_PER_RECEIPT_RESTRICTION("PBC00021", "ACQ.BEYOND_PER_RECEIPT_RESTRICTION", "商户收款金额超过月限额"),
    BUYER_PAYMENT_AMOUNT_MONTH_LIMIT_ERROR("PBC00022", "ACQ.BUYER_PAYMENT_AMOUNT_MONTH_LIMIT_ERROR", "买家付款月额度超限"),
    SELLER_BEEN_BLOCKED("PBC00023", "ACQ.SELLER_BEEN_BLOCKED", "商家账号被冻结"),
    ERROR_BUYER_CERTIFY_LEVEL_LIMIT("PBC00024", "ACQ.ERROR_BUYER_CERTIFY_LEVEL_LIMIT", "买家未通过人行认证"),
    PAYMENT_REQUEST_HAS_RISK("PBC00025", "ACQ.PAYMENT_REQUEST_HAS_RISK", "支付有风险"),
    NO_PAYMENT_INSTRUMENTS_AVAILABLE("PBC00026", "ACQ.NO_PAYMENT_INSTRUMENTS_AVAILABLE", "没有可用的支付工具"),
    USER_FACE_PAYMENT_SWITCH_OFF("PBC00027", "ACQ.USER_FACE_PAYMENT_SWITCH_OFF", "用户当面付付款开关关闭"),
    INVALID_STORE_ID("PBC00028", "ACQ.INVALID_STORE_ID", "商户门店编号无效"),
    SUB_MERCHANT_CREATE_FAIL("PBC00029", "ACQ.SUB_MERCHANT_CREATE_FAIL", "二级商户创建失败"),
    SUB_MERCHANT_TYPE_INVALID("PBC00030", "ACQ.SUB_MERCHANT_TYPE_INVALID", "二级商户类型非法"),
    AGREEMENT_NOT_EXIST("PBC00031", "ACQ.AGREEMENT_NOT_EXIST", "用户协议不存在或已解约"),
    AGREEMENT_INVALID("PBC00032", "ACQ.AGREEMENT_INVALID", "用户协议失效"),
    AGREEMENT_STATUS_NOT_NORMAL("PBC00033", "ACQ.AGREEMENT_STATUS_NOT_NORMAL", "用户协议状态非NORMAL"),
    MERCHANT_AGREEMENT_NOT_EXIST("PBC00034", "ACQ.MERCHANT_AGREEMENT_NOT_EXIST", "商户协议不存在"),
    MERCHANT_AGREEMENT_INVALID("PBC00035", "ACQ.MERCHANT_AGREEMENT_INVALID", "商户协议已失效"),
    MERCHANT_STATUS_NOT_NORMAL("PBC00036", "ACQ.MERCHANT_STATUS_NOT_NORMAL", "商户状态异常"),
    CARD_USER_NOT_MATCH("PBC00037", "ACQ.CARD_USER_NOT_MATCH", "脱机记录用户信息不匹配"),
    CARD_TYPE_ERROR("PBC00038", "ACQ.CARD_TYPE_ERROR", "卡类型错误"),
    CERT_EXPIRED("PBC00039", "ACQ.CERT_EXPIRED", "凭证过期"),
    AMOUNT_OR_CURRENCY_ERROR("PBC00040", "ACQ.AMOUNT_OR_CURRENCY_ERROR", "订单金额或币种信息错误"),
    CURRENCY_NOT_SUPPORT("PBC00041", "ACQ.CURRENCY_NOT_SUPPORT", "订单币种不支持"),
    MERCHANT_UNSUPPORT_ADVANCE("PBC00042", "ACQ.MERCHANT_UNSUPPORT_ADVANCE", "先享后付2.0准入失败,商户不支持垫资支付产品"),
    BUYER_UNSUPPORT_ADVANCE("PBC00043", "ACQ.BUYER_UNSUPPORT_ADVANCE", "先享后付2.0准入失败,买家不满足垫资条件"),
    ORDER_UNSUPPORT_ADVANCE("PBC00044", "ACQ.ORDER_UNSUPPORT_ADVANCE", "订单不支持先享后付垫资"),
    CYCLE_PAY_DATE_NOT_MATCH("PBC00045", "ACQ.CYCLE_PAY_DATE_NOT_MATCH", "扣款日期不在签约时的允许范围之内"),
    CYCLE_PAY_SINGLE_FEE_EXCEED("PBC00046", "ACQ.CYCLE_PAY_SINGLE_FEE_EXCEED", "周期扣款的单笔金额超过签约时限制"),
    CYCLE_PAY_TOTAL_FEE_EXCEED("PBC00047", "ACQ.CYCLE_PAY_TOTAL_FEE_EXCEED", "周期扣款的累计金额超过签约时限制"),
    CYCLE_PAY_TOTAL_TIMES_EXCEED("PBC00048", "ACQ.CYCLE_PAY_TOTAL_TIMES_EXCEED", "周期扣款的总次数超过签约时限制"),
    SECONDARY_MERCHANT_STATUS_ERROR("PBC00049", "ACQ.SECONDARY_MERCHANT_STATUS_ERROR", "商户状态异常"),
    AUTH_NO_ERROR("PBC00050", "ACQ.AUTH_NO_ERROR", "预授权号错误或状态不对"),
    BUYER_NOT_EXIST("PBC00051", "ACQ.BUYER_NOT_EXIST", "买家不存在"),
    PRODUCT_AMOUNT_LIMIT_ERROR("PBC00052", "ACQ.PRODUCT_AMOUNT_LIMIT_ERROR", "产品额度超限"),
    SECONDARY_MERCHANT_ALIPAY_ACCOUNT_INVALID("PBC00053", "ACQ.SECONDARY_MERCHANT_ALIPAY_ACCOUNT_INVALID", "二级商户账户异常"),
    INVALID_RECEIVE_ACCOUNT("PBC00054", "ACQ.INVALID_RECEIVE_ACCOUNT", "收款账户不支持"),
    SELLER_NOT_EXIST("PBC00055", "ACQ.SELLER_NOT_EXIST", "卖家不存在"),
    AUTH_AMOUNT_NOT_ENOUGH("PBC00056", "ACQ.AUTH_AMOUNT_NOT_ENOUGH", "授权金额不足"),
    AGREEMENT_ERROR("PBC00057", "ACQ.AGREEMENT_ERROR", "协议信息异常"),
    BEYOND_PER_RECEIPT_SINGLE_RESTRICTION("PBC00058", "ACQ.BEYOND_PER_RECEIPT_SINGLE_RESTRICTION", "订单金额超过单笔限额"),
    PAYER_UNMATCHED("PBC00059", "ACQ.PAYER_UNMATCHED", "付款人不匹配"),
    PRE_AUTH_PROD_CODE_INCONSISTENT("PBC00060", "ACQ.PRE_AUTH_PROD_CODE_INCONSISTENT", "预授权产品码不一致"),
    SECONDARY_MERCHANT_ID_INVALID("PBC00061", "ACQ.SECONDARY_MERCHANT_ID_INVALID", "二级商户不存在"),
    NOW_TIME_AFTER_EXPIRE_TIME_ERROR("PBC00062", "ACQ.NOW_TIME_AFTER_EXPIRE_TIME_ERROR", "当前时间已超过允许支付的时间"),
    SECONDARY_MERCHANT_NOT_MATCH("PBC00063", "ACQ.SECONDARY_MERCHANT_NOT_MATCH", "二级商户信息不匹配"),
    REQUEST_AMOUNT_EXCEED("PBC00064", "ACQ.REQUEST_AMOUNT_EXCEED", "请求金额超限"),
    SUB_GOODS_SIZE_MAX_COUNT("PBC00065", "ACQ.SUB_GOODS_SIZE_MAX_COUNT", "子商品明细超长"),
    NOT_SUPPORT_PAYMENT_INST("PBC00066", "ACQ.NOT_SUPPORT_PAYMENT_INST", "不支持的钱包版本"),
    BUYER_NOT_MAINLAND_CERT("PBC00067", "ACQ.BUYER_NOT_MAINLAND_CERT", "买家证件类型非大陆身份证"),
    SECONDARY_MERCHANT_ID_BLANK("PBC00068", "ACQ.SECONDARY_MERCHANT_ID_BLANK", "二级商户编号错误"),
    TRADE_SETTLE_ERROR("PBC00069", "ACQ.TRADE_SETTLE_ERROR", "交易结算异常"),
    AUTH_TOKEN_IS_NOT_EXIST("PBC00070", "ACQ.AUTH_TOKEN_IS_NOT_EXIST", "支付授权码为空"),
    SMILE_PAY_MERCHANT_NOT_MATCH("PBC00071", "ACQ.SMILE_PAY_MERCHANT_NOT_MATCH", "请求支付和刷脸服务的商户身份不一致"),
    NOT_CERTIFIED_USER("PBC00072", "ACQ.NOT_CERTIFIED_USER", "买家非实名认证用户"),
    SECONDARY_MERCHANT_ISV_PUNISH_INDIRECT("PBC00073", "ACQ.SECONDARY_MERCHANT_ISV_PUNISH_INDIRECT", "商户状态异常"),
    RESTRICTED_MERCHANT_INDUSTRY("PBC00074", "ACQ.RESTRICTED_MERCHANT_INDUSTRY", "行业信息交易受限"),
    PLATFORM_BUSINESS_ACQUIRE_MODE_MUST_MERCHANT_ID("PBC00075", "ACQ.PLATFORM_BUSINESS_ACQUIRE_MODE_MUST_MERCHANT_ID", "二级商户编码为空"),
    BEYOND_PER_RECEIPT_DAY_RESTRICTION("PBC00076", "ACQ.BEYOND_PER_RECEIPT_DAY_RESTRICTION", "订单金额超过当日累计限额"),
    TRADE_STATUS_ERROR("PBC00077", "ACQ.TRADE_STATUS_ERROR", "交易状态异常"),
    MERCHANT_PERM_RECEIPT_SUSPEND_LIMIT("PBC00078", "ACQ.MERCHANT_PERM_RECEIPT_SUSPEND_LIMIT", "商户暂停收款"),
    MERCHANT_PERM_RECEIPT_SINGLE_LIMIT("PBC00079", "ACQ.MERCHANT_PERM_RECEIPT_SINGLE_LIMIT", "超过单笔收款限额"),
    MERCHANT_PERM_RECEIPT_DAY_LIMIT("PBC00080", "ACQ.MERCHANT_PERM_RECEIPT_DAY_LIMIT", "超过单日累计收款额度"),
    USER_LOGONID_DUP("PBC00081", "ACQ.USER_LOGONID_DUP", "用户账号重复"),
    AUTH_ORDER_NOT_PAID("PBC00082", "ACQ.AUTH_ORDER_NOT_PAID", "预授权订单未支付"),
    AUTH_ORDER_HAS_FINISHED("PBC00083", "ACQ.AUTH_ORDER_HAS_FINISHED", "预授权订单已经完结"),
    AUTH_ORDER_HAS_CLOSED("PBC00084", "ACQ.AUTH_ORDER_HAS_CLOSED", "预授权订单已关闭"),
    ZM_AUTH_AMOUNT_EXCEED("PBC00085", "ACQ.ZM_AUTH_AMOUNT_EXCEED", "先用后付场景下超过约定的免密支付金额"),
    ZM_CREDIT_AUTH_FAIL("PBC00086", "ACQ.ZM_CREDIT_AUTH_FAIL", "综合评估不通过"),
    RISK_MERCHANT_IP_NOT_EXIST("PBC00087", "ACQ.RISK_MERCHANT_IP_NOT_EXIST", "当前交易未传入IP信息，创单失败，请传入IP后再发起支付"),
    ;

    private String key;

    private String code;

    private String value;

    BarCodePayErrorCode(String key, String code, String value) {
        this.key = key;
        this.value = value;
        this.code = code;
    }

    @Override
    public BarCodePayErrorCode get() {
        return this;
    }

    @Override
    public String getKey() {
        return key;
    }

    @Override
    public String getValue() {
        return value;
    }

    public String getCode() {
        return code;
    }

    public static BarCodePayErrorCode getByCode(String code) {
        BarCodePayErrorCode[] values = BarCodePayErrorCode.values();
        for (BarCodePayErrorCode value : values) {
            if (value.getCode().equals(code)) {
                return value;
            }
        }
        return null;
    }


}
